# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Park(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, title: str=None, description: str=None, number_of_qr_codes: int=None):  # noqa: E501
        """Park - a model defined in Swagger

        :param id: The id of this Park.  # noqa: E501
        :type id: str
        :param title: The title of this Park.  # noqa: E501
        :type title: str
        :param description: The description of this Park.  # noqa: E501
        :type description: str
        :param number_of_qr_codes: The number_of_qr_codes of this Park.  # noqa: E501
        :type number_of_qr_codes: int
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'description': str,
            'number_of_qr_codes': int
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'number_of_qr_codes': 'numberOfQrCodes'
        }

        self._id = id
        self._title = title
        self._description = description
        self._number_of_qr_codes = number_of_qr_codes

    @classmethod
    def from_dict(cls, dikt) -> 'Park':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Park of this Park.  # noqa: E501
        :rtype: Park
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Park.


        :return: The id of this Park.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Park.


        :param id: The id of this Park.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Park.


        :return: The title of this Park.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Park.


        :param title: The title of this Park.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this Park.

        Description of the park  # noqa: E501

        :return: The description of this Park.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Park.

        Description of the park  # noqa: E501

        :param description: The description of this Park.
        :type description: str
        """

        self._description = description

    @property
    def number_of_qr_codes(self) -> int:
        """Gets the number_of_qr_codes of this Park.


        :return: The number_of_qr_codes of this Park.
        :rtype: int
        """
        return self._number_of_qr_codes

    @number_of_qr_codes.setter
    def number_of_qr_codes(self, number_of_qr_codes: int):
        """Sets the number_of_qr_codes of this Park.


        :param number_of_qr_codes: The number_of_qr_codes of this Park.
        :type number_of_qr_codes: int
        """
        if number_of_qr_codes is not None and number_of_qr_codes < 0:  # noqa: E501
            raise ValueError("Invalid value for `number_of_qr_codes`, must be a value greater than or equal to `0`")  # noqa: E501

        self._number_of_qr_codes = number_of_qr_codes
